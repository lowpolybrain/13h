"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@13h/core");const t=(e,t)=>{const o=e.element.offsetWidth,n=e.element.offsetHeight;return[e.size[0]*(t[0]/o),e.size[1]*(t[1]/n)]};var o;exports.LockState=void 0,(o=exports.LockState||(exports.LockState={}))[o.Unlocked=0]="Unlocked",o[o.Pending=1]="Pending",o[o.Locked=2]="Locked";exports.MouseCapture=class{constructor(e){e&&this.mount(e)}get isMounted(){return!!this.mountedCanvas}setPos(t){this.pos=e.point.clamp(t,e.point.zero,[1/0,1/0]),this.unClampedPos=t}unClampedPos=[0,0];pos=[0,0];mount(t){this.unmount(),this.mountedCanvas=t,this.pos=e.point.clamp(this.pos,e.point.zero,t.maxPoint),t.element.addEventListener("click",this.handleClick),t.element.addEventListener("pointerup",this.handleUnlock),document.addEventListener("pointerlockchange",this.handlePointerLockChange),document.addEventListener("pointerlockerror",this.handleUnlock)}unmount(){this.mountedCanvas&&(this.mountedCanvas.element.removeEventListener("click",this.handleClick),this.mountedCanvas.element.removeEventListener("pointerup",this.handleUnlock),document.removeEventListener("pointerlockchange",this.handlePointerLockChange),document.removeEventListener("pointerlockerror",this.handleUnlock),this.mountedCanvas.element.removeEventListener("mousemove",this.handleMouseMove)),this.mountedCanvas=void 0}lockState=exports.LockState.Unlocked;handlePointerLockChange=()=>{this.lockState===exports.LockState.Pending?(this.lockState=exports.LockState.Locked,this.mountedCanvas?.element.addEventListener("mousemove",this.handleMouseMove)):(this.lockState=exports.LockState.Unlocked,this.mountedCanvas?.element.removeEventListener("mousemove",this.handleMouseMove))};handleClick=async e=>{if(this.mountedCanvas&&this.lockState===exports.LockState.Unlocked){this.lockState=exports.LockState.Pending;try{await this.mountedCanvas.element.requestPointerLock()}catch(e){this.lockState=exports.LockState.Unlocked}}};handleUnlock=()=>{this.lockState=exports.LockState.Unlocked};handleMouseMove=o=>{if(this.lockState===exports.LockState.Locked&&this.mountedCanvas){const n=[o.movementX,o.movementY];this.unClampedPos=e.point.add(this.pos,t(this.mountedCanvas,n)),this.pos=e.point.clamp(e.point.add(this.pos,t(this.mountedCanvas,n)),e.point.zero,this.mountedCanvas.maxPoint)}};mountedCanvas},exports.MouseTracker=class{constructor(e){e&&this.mount(e)}realPos=[0,0];pos=[0,0];mount(e){this.unmount(),this.mountedCanvas=e,e.element.addEventListener("mousemove",this.mouseMove)}isMounted(){return!!this.mountedCanvas}unmount(){this.mountedCanvas&&(this.mountedCanvas.element.removeEventListener("mousemove",this.mouseMove),this.mountedCanvas=void 0)}mountedCanvas;mouseMove=e=>{this.mountedCanvas&&(this.realPos=[e.offsetX,e.offsetY],this.pos=t(this.mountedCanvas,this.realPos))}},exports.coordsToLocal=t;
